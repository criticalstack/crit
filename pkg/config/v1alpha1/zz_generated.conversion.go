// +build !ignore_autogenerated

/*
Copyright 2020 Critical Stack, LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	util "github.com/criticalstack/crit/pkg/cluster/components/util"
	constants "github.com/criticalstack/crit/pkg/config/constants"
	v1alpha2 "github.com/criticalstack/crit/pkg/config/v1alpha2"
	v1 "k8s.io/api/core/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v1beta1 "k8s.io/kubelet/config/v1beta1"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*EtcdConfiguration)(nil), (*v1alpha2.EtcdConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_EtcdConfiguration_To_v1alpha2_EtcdConfiguration(a.(*EtcdConfiguration), b.(*v1alpha2.EtcdConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.EtcdConfiguration)(nil), (*EtcdConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_EtcdConfiguration_To_v1alpha1_EtcdConfiguration(a.(*v1alpha2.EtcdConfiguration), b.(*EtcdConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubeAPIServerConfiguration)(nil), (*v1alpha2.KubeAPIServerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_KubeAPIServerConfiguration_To_v1alpha2_KubeAPIServerConfiguration(a.(*KubeAPIServerConfiguration), b.(*v1alpha2.KubeAPIServerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubeControllerManagerConfiguration)(nil), (*v1alpha2.KubeControllerManagerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_KubeControllerManagerConfiguration_To_v1alpha2_KubeControllerManagerConfiguration(a.(*KubeControllerManagerConfiguration), b.(*v1alpha2.KubeControllerManagerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.KubeControllerManagerConfiguration)(nil), (*KubeControllerManagerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_KubeControllerManagerConfiguration_To_v1alpha1_KubeControllerManagerConfiguration(a.(*v1alpha2.KubeControllerManagerConfiguration), b.(*KubeControllerManagerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*KubeSchedulerConfiguration)(nil), (*v1alpha2.KubeSchedulerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_KubeSchedulerConfiguration_To_v1alpha2_KubeSchedulerConfiguration(a.(*KubeSchedulerConfiguration), b.(*v1alpha2.KubeSchedulerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.KubeSchedulerConfiguration)(nil), (*KubeSchedulerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_KubeSchedulerConfiguration_To_v1alpha1_KubeSchedulerConfiguration(a.(*v1alpha2.KubeSchedulerConfiguration), b.(*KubeSchedulerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha2.NodeConfiguration)(nil), (*NodeConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration(a.(*v1alpha2.NodeConfiguration), b.(*NodeConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ControlPlaneConfiguration)(nil), (*v1alpha2.ControlPlaneConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ControlPlaneConfiguration_To_v1alpha2_ControlPlaneConfiguration(a.(*ControlPlaneConfiguration), b.(*v1alpha2.ControlPlaneConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*CritBootstrapServerConfiguration)(nil), (*v1alpha2.CritBootstrapServerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_CritBootstrapServerConfiguration_To_v1alpha2_CritBootstrapServerConfiguration(a.(*CritBootstrapServerConfiguration), b.(*v1alpha2.CritBootstrapServerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*NodeConfiguration)(nil), (*v1alpha2.NodeConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_NodeConfiguration_To_v1alpha2_NodeConfiguration(a.(*NodeConfiguration), b.(*v1alpha2.NodeConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*WorkerConfiguration)(nil), (*v1alpha2.WorkerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_WorkerConfiguration_To_v1alpha2_WorkerConfiguration(a.(*WorkerConfiguration), b.(*v1alpha2.WorkerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.ControlPlaneConfiguration)(nil), (*ControlPlaneConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ControlPlaneConfiguration_To_v1alpha1_ControlPlaneConfiguration(a.(*v1alpha2.ControlPlaneConfiguration), b.(*ControlPlaneConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.CritBootstrapServerConfiguration)(nil), (*CritBootstrapServerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_CritBootstrapServerConfiguration_To_v1alpha1_CritBootstrapServerConfiguration(a.(*v1alpha2.CritBootstrapServerConfiguration), b.(*CritBootstrapServerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.KubeAPIServerConfiguration)(nil), (*KubeAPIServerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_KubeAPIServerConfiguration_To_v1alpha1_KubeAPIServerConfiguration(a.(*v1alpha2.KubeAPIServerConfiguration), b.(*KubeAPIServerConfiguration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha2.WorkerConfiguration)(nil), (*WorkerConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_WorkerConfiguration_To_v1alpha1_WorkerConfiguration(a.(*v1alpha2.WorkerConfiguration), b.(*WorkerConfiguration), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_ControlPlaneConfiguration_To_v1alpha2_ControlPlaneConfiguration(in *ControlPlaneConfiguration, out *v1alpha2.ControlPlaneConfiguration, s conversion.Scope) error {
	out.ClusterName = in.ClusterName
	// WARNING: in.ControlPlaneEndpoint requires manual conversion: inconvertible types (string vs github.com/criticalstack/crit/pkg/cluster/components/util.APIEndpoint)
	// WARNING: in.APIServerURL requires manual conversion: does not exist in peer-type
	out.CoreDNSVersion = in.CoreDNSVersion
	// WARNING: in.Verbosity requires manual conversion: does not exist in peer-type
	if err := Convert_v1alpha1_CritBootstrapServerConfiguration_To_v1alpha2_CritBootstrapServerConfiguration(&in.CritBootstrapServerConfiguration, &out.CritBootstrapServerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_EtcdConfiguration_To_v1alpha2_EtcdConfiguration(&in.EtcdConfiguration, &out.EtcdConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_KubeAPIServerConfiguration_To_v1alpha2_KubeAPIServerConfiguration(&in.KubeAPIServerConfiguration, &out.KubeAPIServerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_KubeControllerManagerConfiguration_To_v1alpha2_KubeControllerManagerConfiguration(&in.KubeControllerManagerConfiguration, &out.KubeControllerManagerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_KubeSchedulerConfiguration_To_v1alpha2_KubeSchedulerConfiguration(&in.KubeSchedulerConfiguration, &out.KubeSchedulerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_NodeConfiguration_To_v1alpha2_NodeConfiguration(&in.NodeConfiguration, &out.NodeConfiguration, s); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha2_ControlPlaneConfiguration_To_v1alpha1_ControlPlaneConfiguration(in *v1alpha2.ControlPlaneConfiguration, out *ControlPlaneConfiguration, s conversion.Scope) error {
	out.ClusterName = in.ClusterName
	// WARNING: in.ControlPlaneEndpoint requires manual conversion: inconvertible types (github.com/criticalstack/crit/pkg/cluster/components/util.APIEndpoint vs string)
	// WARNING: in.PodSubnet requires manual conversion: does not exist in peer-type
	// WARNING: in.ServiceSubnet requires manual conversion: does not exist in peer-type
	out.CoreDNSVersion = in.CoreDNSVersion
	// WARNING: in.FeatureGates requires manual conversion: does not exist in peer-type
	if err := Convert_v1alpha2_EtcdConfiguration_To_v1alpha1_EtcdConfiguration(&in.EtcdConfiguration, &out.EtcdConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_KubeAPIServerConfiguration_To_v1alpha1_KubeAPIServerConfiguration(&in.KubeAPIServerConfiguration, &out.KubeAPIServerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_KubeControllerManagerConfiguration_To_v1alpha1_KubeControllerManagerConfiguration(&in.KubeControllerManagerConfiguration, &out.KubeControllerManagerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_KubeSchedulerConfiguration_To_v1alpha1_KubeSchedulerConfiguration(&in.KubeSchedulerConfiguration, &out.KubeSchedulerConfiguration, s); err != nil {
		return err
	}
	// WARNING: in.KubeProxyConfiguration requires manual conversion: does not exist in peer-type
	if err := Convert_v1alpha2_CritBootstrapServerConfiguration_To_v1alpha1_CritBootstrapServerConfiguration(&in.CritBootstrapServerConfiguration, &out.CritBootstrapServerConfiguration, s); err != nil {
		return err
	}
	if err := Convert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration(&in.NodeConfiguration, &out.NodeConfiguration, s); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_CritBootstrapServerConfiguration_To_v1alpha2_CritBootstrapServerConfiguration(in *CritBootstrapServerConfiguration, out *v1alpha2.CritBootstrapServerConfiguration, s conversion.Scope) error {
	// WARNING: in.ImageRegistry requires manual conversion: does not exist in peer-type
	out.Version = in.Version
	out.BindPort = in.BindPort
	out.CloudProvider = in.CloudProvider
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	return nil
}

func autoConvert_v1alpha2_CritBootstrapServerConfiguration_To_v1alpha1_CritBootstrapServerConfiguration(in *v1alpha2.CritBootstrapServerConfiguration, out *CritBootstrapServerConfiguration, s conversion.Scope) error {
	out.Version = in.Version
	out.BindPort = in.BindPort
	out.CloudProvider = in.CloudProvider
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	return nil
}

func autoConvert_v1alpha1_EtcdConfiguration_To_v1alpha2_EtcdConfiguration(in *EtcdConfiguration, out *v1alpha2.EtcdConfiguration, s conversion.Scope) error {
	out.Endpoints = *(*[]string)(unsafe.Pointer(&in.Endpoints))
	out.CAFile = in.CAFile
	out.CertFile = in.CertFile
	out.KeyFile = in.KeyFile
	out.CAKey = in.CAKey
	return nil
}

// Convert_v1alpha1_EtcdConfiguration_To_v1alpha2_EtcdConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_EtcdConfiguration_To_v1alpha2_EtcdConfiguration(in *EtcdConfiguration, out *v1alpha2.EtcdConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_EtcdConfiguration_To_v1alpha2_EtcdConfiguration(in, out, s)
}

func autoConvert_v1alpha2_EtcdConfiguration_To_v1alpha1_EtcdConfiguration(in *v1alpha2.EtcdConfiguration, out *EtcdConfiguration, s conversion.Scope) error {
	out.Endpoints = *(*[]string)(unsafe.Pointer(&in.Endpoints))
	out.CAFile = in.CAFile
	out.CertFile = in.CertFile
	out.KeyFile = in.KeyFile
	out.CAKey = in.CAKey
	return nil
}

// Convert_v1alpha2_EtcdConfiguration_To_v1alpha1_EtcdConfiguration is an autogenerated conversion function.
func Convert_v1alpha2_EtcdConfiguration_To_v1alpha1_EtcdConfiguration(in *v1alpha2.EtcdConfiguration, out *EtcdConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha2_EtcdConfiguration_To_v1alpha1_EtcdConfiguration(in, out, s)
}

func autoConvert_v1alpha1_KubeAPIServerConfiguration_To_v1alpha2_KubeAPIServerConfiguration(in *KubeAPIServerConfiguration, out *v1alpha2.KubeAPIServerConfiguration, s conversion.Scope) error {
	out.BindPort = in.BindPort
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	out.ExtraVolumes = *(*[]util.HostPathMount)(unsafe.Pointer(&in.ExtraVolumes))
	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
	out.ExtraSANs = *(*[]string)(unsafe.Pointer(&in.ExtraSANs))
	return nil
}

// Convert_v1alpha1_KubeAPIServerConfiguration_To_v1alpha2_KubeAPIServerConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_KubeAPIServerConfiguration_To_v1alpha2_KubeAPIServerConfiguration(in *KubeAPIServerConfiguration, out *v1alpha2.KubeAPIServerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeAPIServerConfiguration_To_v1alpha2_KubeAPIServerConfiguration(in, out, s)
}

func autoConvert_v1alpha2_KubeAPIServerConfiguration_To_v1alpha1_KubeAPIServerConfiguration(in *v1alpha2.KubeAPIServerConfiguration, out *KubeAPIServerConfiguration, s conversion.Scope) error {
	out.BindPort = in.BindPort
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	out.ExtraVolumes = *(*[]HostPathMount)(unsafe.Pointer(&in.ExtraVolumes))
	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
	out.ExtraSANs = *(*[]string)(unsafe.Pointer(&in.ExtraSANs))
	// WARNING: in.HealthcheckProxyVersion requires manual conversion: does not exist in peer-type
	// WARNING: in.HealthcheckProxyBindPort requires manual conversion: does not exist in peer-type
	return nil
}

func autoConvert_v1alpha1_KubeControllerManagerConfiguration_To_v1alpha2_KubeControllerManagerConfiguration(in *KubeControllerManagerConfiguration, out *v1alpha2.KubeControllerManagerConfiguration, s conversion.Scope) error {
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	out.ExtraVolumes = *(*[]util.HostPathMount)(unsafe.Pointer(&in.ExtraVolumes))
	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
	return nil
}

// Convert_v1alpha1_KubeControllerManagerConfiguration_To_v1alpha2_KubeControllerManagerConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_KubeControllerManagerConfiguration_To_v1alpha2_KubeControllerManagerConfiguration(in *KubeControllerManagerConfiguration, out *v1alpha2.KubeControllerManagerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeControllerManagerConfiguration_To_v1alpha2_KubeControllerManagerConfiguration(in, out, s)
}

func autoConvert_v1alpha2_KubeControllerManagerConfiguration_To_v1alpha1_KubeControllerManagerConfiguration(in *v1alpha2.KubeControllerManagerConfiguration, out *KubeControllerManagerConfiguration, s conversion.Scope) error {
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	out.ExtraVolumes = *(*[]HostPathMount)(unsafe.Pointer(&in.ExtraVolumes))
	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
	return nil
}

// Convert_v1alpha2_KubeControllerManagerConfiguration_To_v1alpha1_KubeControllerManagerConfiguration is an autogenerated conversion function.
func Convert_v1alpha2_KubeControllerManagerConfiguration_To_v1alpha1_KubeControllerManagerConfiguration(in *v1alpha2.KubeControllerManagerConfiguration, out *KubeControllerManagerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha2_KubeControllerManagerConfiguration_To_v1alpha1_KubeControllerManagerConfiguration(in, out, s)
}

func autoConvert_v1alpha1_KubeSchedulerConfiguration_To_v1alpha2_KubeSchedulerConfiguration(in *KubeSchedulerConfiguration, out *v1alpha2.KubeSchedulerConfiguration, s conversion.Scope) error {
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	out.ExtraVolumes = *(*[]util.HostPathMount)(unsafe.Pointer(&in.ExtraVolumes))
	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
	return nil
}

// Convert_v1alpha1_KubeSchedulerConfiguration_To_v1alpha2_KubeSchedulerConfiguration is an autogenerated conversion function.
func Convert_v1alpha1_KubeSchedulerConfiguration_To_v1alpha2_KubeSchedulerConfiguration(in *KubeSchedulerConfiguration, out *v1alpha2.KubeSchedulerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_KubeSchedulerConfiguration_To_v1alpha2_KubeSchedulerConfiguration(in, out, s)
}

func autoConvert_v1alpha2_KubeSchedulerConfiguration_To_v1alpha1_KubeSchedulerConfiguration(in *v1alpha2.KubeSchedulerConfiguration, out *KubeSchedulerConfiguration, s conversion.Scope) error {
	out.ExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.ExtraArgs))
	out.ExtraVolumes = *(*[]HostPathMount)(unsafe.Pointer(&in.ExtraVolumes))
	out.FeatureGates = *(*map[string]bool)(unsafe.Pointer(&in.FeatureGates))
	return nil
}

// Convert_v1alpha2_KubeSchedulerConfiguration_To_v1alpha1_KubeSchedulerConfiguration is an autogenerated conversion function.
func Convert_v1alpha2_KubeSchedulerConfiguration_To_v1alpha1_KubeSchedulerConfiguration(in *v1alpha2.KubeSchedulerConfiguration, out *KubeSchedulerConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha2_KubeSchedulerConfiguration_To_v1alpha1_KubeSchedulerConfiguration(in, out, s)
}

func autoConvert_v1alpha1_NodeConfiguration_To_v1alpha2_NodeConfiguration(in *NodeConfiguration, out *v1alpha2.NodeConfiguration, s conversion.Scope) error {
	out.KubernetesVersion = in.KubernetesVersion
	out.Hostname = in.Hostname
	out.KubeDir = in.KubeDir
	out.HostIPv4 = in.HostIPv4
	// WARNING: in.KubeProxyMode requires manual conversion: does not exist in peer-type
	// WARNING: in.DNSDomain requires manual conversion: does not exist in peer-type
	// WARNING: in.PodSubnet requires manual conversion: does not exist in peer-type
	// WARNING: in.ServiceSubnet requires manual conversion: does not exist in peer-type
	out.CloudProvider = in.CloudProvider
	out.ContainerRuntime = constants.ContainerRuntime(in.ContainerRuntime)
	out.Taints = *(*[]v1.Taint)(unsafe.Pointer(&in.Taints))
	out.KubeletConfiguration = (*v1beta1.KubeletConfiguration)(unsafe.Pointer(in.KubeletConfiguration))
	out.KubeletExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.KubeletExtraArgs))
	return nil
}

func autoConvert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration(in *v1alpha2.NodeConfiguration, out *NodeConfiguration, s conversion.Scope) error {
	out.KubernetesVersion = in.KubernetesVersion
	out.Hostname = in.Hostname
	out.KubeDir = in.KubeDir
	out.HostIPv4 = in.HostIPv4
	out.CloudProvider = in.CloudProvider
	out.ContainerRuntime = ContainerRuntime(in.ContainerRuntime)
	out.Taints = *(*[]v1.Taint)(unsafe.Pointer(&in.Taints))
	out.KubeletConfiguration = (*v1beta1.KubeletConfiguration)(unsafe.Pointer(in.KubeletConfiguration))
	out.KubeletExtraArgs = *(*map[string]string)(unsafe.Pointer(&in.KubeletExtraArgs))
	return nil
}

// Convert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration is an autogenerated conversion function.
func Convert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration(in *v1alpha2.NodeConfiguration, out *NodeConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration(in, out, s)
}

func autoConvert_v1alpha1_WorkerConfiguration_To_v1alpha2_WorkerConfiguration(in *WorkerConfiguration, out *v1alpha2.WorkerConfiguration, s conversion.Scope) error {
	out.ClusterName = in.ClusterName
	// WARNING: in.ControlPlaneEndpoint requires manual conversion: inconvertible types (string vs github.com/criticalstack/crit/pkg/cluster/components/util.APIEndpoint)
	// WARNING: in.APIServerURL requires manual conversion: does not exist in peer-type
	out.BootstrapServerURL = in.BootstrapServerURL
	out.BootstrapToken = in.BootstrapToken
	out.CACert = in.CACert
	if err := Convert_v1alpha1_NodeConfiguration_To_v1alpha2_NodeConfiguration(&in.NodeConfiguration, &out.NodeConfiguration, s); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha2_WorkerConfiguration_To_v1alpha1_WorkerConfiguration(in *v1alpha2.WorkerConfiguration, out *WorkerConfiguration, s conversion.Scope) error {
	out.ClusterName = in.ClusterName
	// WARNING: in.ControlPlaneEndpoint requires manual conversion: inconvertible types (github.com/criticalstack/crit/pkg/cluster/components/util.APIEndpoint vs string)
	// WARNING: in.FeatureGates requires manual conversion: does not exist in peer-type
	out.BootstrapServerURL = in.BootstrapServerURL
	out.BootstrapToken = in.BootstrapToken
	out.CACert = in.CACert
	if err := Convert_v1alpha2_NodeConfiguration_To_v1alpha1_NodeConfiguration(&in.NodeConfiguration, &out.NodeConfiguration, s); err != nil {
		return err
	}
	return nil
}
